         const Center(
              child: Text('<주제 별>',
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold))),
          Expanded(
            child: GridView.builder(
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 3, childAspectRatio: 1.5),
              itemCount: topicSubtopics.keys.length,
              itemBuilder: (context, index) {
                String topic = topicSubtopics.keys.elementAt(index);
                List<String> subtopics = topicSubtopics[topic]!;
                return PopupMenuButton<String>(
                  onSelected: (subtopic) {
                    setState(() {
                      selectedTopic = topic;
                      selectedSubtopic = subtopic;
                      filterQuestionsAndNavigate(byYear: false);
                    });
                  },
                  itemBuilder: (_) => subtopics
                      .map((subtopic) => PopupMenuItem(
                          value: subtopic,
                          child: Text(subtopic,
                              style: const TextStyle(fontSize: 20))))
                      .toList(),
                  child: Container(
                    color: Colors.blue,
                    padding: const EdgeInsets.all(8.0),
                    child: Center(
                        child: Text(topic,
                            style: const TextStyle(color: Colors.white))),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

const Map<String, List<String>> topicSubtopics = {
  '송전선로': ['송전선로'],
  '수전설비': ['수전방식', '변압기', '차단기', '보호계전기', '전력퓨즈', '서지흡수기'],
  '배전선로': ['배전선로', '간선설비', '접지설비', '옥내배선', '절연내력'],
  '부하설비': ['조명', '동력', '전력용콘덴서', '예비전원'],
  '감리 및 규정': ['피뢰기', '감리', 'KEC'],
  '시퀀스 제어': ['무접점', '유접점', '전동기', 'PLC', '전선 가닥수'],
  '고장해석 및 중성점접지': ['고장해석', '중성점접지'],
  '기타': ['기타1', '기타2', '기타3'],
};

/////////////////////////////(12/12)
// "주제검색" 페이지

const Map<String, List<String>> topicSubtopics = {
  '송전선로': ['송전선로', '유도장해'],
  '수전설비': ['수전방식', '변압기', '차단기', '보호계전기', '전력퓨즈', '서지흡수기'],
  '배전선로': ['배전선로', '간선설비', '접지설비', '옥내배선', '절연내력'],
  '부하설비': ['조명', '동력', '전력용콘덴서', '예비전원'],
  '감리 및 규정': ['피뢰기', '감리', 'KEC'],
  '시퀀스 제어': ['무접점', '유접점', '전동기', 'PLC', '전선 가닥수'],
  '고장해석 및 중성점접지': ['고장해석', '중성점접지'],
  '기타': ['기타1', '기타2', '기타3'],
};

class SubjectSearchPage extends StatefulWidget {
  const SubjectSearchPage({super.key});

  @override
  State<SubjectSearchPage> createState() => _SubjectSearchPageState();
}

class _SubjectSearchPageState extends State<SubjectSearchPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          '주제 검색',
          style: TextStyle(fontSize: 30, fontWeight: FontWeight.bold),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: GridView.count(
          crossAxisCount: 1,
          childAspectRatio: 1.5,
          crossAxisSpacing: 16.0,
          mainAxisSpacing: 30.0,
          children: topicSubtopics.keys.map((topic) {
            return _buildTopicBox(context, topic);
          }).toList(),
        ),
      ),
    );
  }

  Widget _buildTopicBox(BuildContext context, String topic) {
    return GestureDetector(
      onTap: () {
        _showSubtopicsPopup(context, topic);
      },
      child: Container(
        padding: const EdgeInsets.all(16.0),
        decoration: BoxDecoration(
          color: Colors.blue[100],
          border: Border.all(color: Colors.blue, width: 2.0),
          borderRadius: BorderRadius.circular(8.0),
        ),
        child: Center(
          child: Text(
            topic,
            style: const TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.black87,
            ),
            textAlign: TextAlign.center,
          ),
        ),
      ),
    );
  }

  void _showSubtopicsPopup(BuildContext context, String topic) {
    final subtopics = topicSubtopics[topic] ?? [];
    showMenu(
      context: context,
      position:
          const RelativeRect.fromLTRB(100, 100, 100, 100), // Popup position
      items: subtopics.map((subtopic) {
        return PopupMenuItem<String>(
          value: subtopic,
          child: Text(subtopic, style: const TextStyle(fontSize: 20)),
        );
      }).toList(),
    ).then((selectedSubtopic) {
      if (selectedSubtopic != null && mounted) {
        // Ensure the widget is still mounted before using BuildContext
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Selected: $selectedSubtopic')),
        );
      }
    });
  }
}
////////////////// 박스 왼쪽 배치, 화실표
// "주제검색" 페이지
const Map<String, List<String>> topicSubtopics = {
  '송전선로': ['송전선로', '유도장해'],
  '수전설비': ['수전방식', '변압기', '차단기', '보호계전기', '전력퓨즈', '서지흡수기'],
  '배전선로': ['배전선로', '간선설비', '접지설비', '옥내배선', '절연내력'],
  '부하설비': ['조명', '동력', '전력용콘덴서', '예비전원'],
  '감리 및 규정': ['피뢰기', '감리', 'KEC'],
  '시퀀스 제어': ['무접점', '유접점', '전동기', 'PLC', '전선 가닥수'],
  '고장해석 및 중성점접지': ['고장해석', '중성점접지'],
  '기타': ['기타1', '기타2', '기타3'],
};

class SubjectSearchPage extends StatefulWidget {
  const SubjectSearchPage({super.key});

  @override
  State<SubjectSearchPage> createState() => _SubjectSearchPageState();
}

class _SubjectSearchPageState extends State<SubjectSearchPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          '주제 검색',
          style: TextStyle(fontSize: 30, fontWeight: FontWeight.bold),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 25.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: topicSubtopics.keys.map((topic) {
            List<String> subtopics = topicSubtopics[topic]!;
            int topicIndex = topicSubtopics.keys.toList().indexOf(topic);
            return Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                PopupMenuButton<String>(
                  onSelected: (subtopic) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Selected: $subtopic')),
                    );
                  },
                  itemBuilder: (context) => subtopics
                      .map((subtopic) => PopupMenuItem(
                            value: subtopic,
                            child: Text(subtopic,
                                style: const TextStyle(fontSize: 20)),
                          ))
                      .toList(),
                  child: Container(
                    width: MediaQuery.of(context).size.width * 0.55, // 가로 길이 반으로 줄임
                    padding: const EdgeInsets.all(20.0),
                    decoration: BoxDecoration(
                      color: topicIndex >= 4 ? Colors.grey[300] : Colors.blue[100],
                      border: Border.all(color: topicIndex >= 4 ? Colors.grey : Colors.blue, width: 2.0),
                      borderRadius: BorderRadius.circular(8.0),
                    ),
                    child: Center(
                      child: Text(
                        topic,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ),
                  ),
                  offset: const Offset(150, 0),
                ),
                if (topicIndex < 4) // 화살표를 위에서 3개까지만 표시
                  const Padding(
                    padding: EdgeInsets.symmetric(vertical: 8.0),
                    child: Icon(Icons.arrow_downward, size: 27, color: Colors.grey),
                  ),
              ],
            );
          }).toList(),
        ),
      ),
    );
  }
}
